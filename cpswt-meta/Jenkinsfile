pipeline {
    agent any
    // triggers {
    //     pollSCM('*/1 * * * *') // poll the SCM every 1 minutes
    // }

    // Throttle a declarative pipeline via options
    options {
      throttleJobProperty(
          categories: ['ci_cpswt_build'],
          throttleEnabled: true,
          throttleOption: 'category'
      )
    }

    stages {
        stage('Clone repository') {
            steps {
                echo 'Cloning CI_with_Jenkins...'
                deleteDir() // Delete workspace before cloning
                sh 'git clone https://github.com/justinyeh1995/CI_with_Jenkins.git'
            }
        }
        stage('Build cpswt-meta image') {
            steps {
                echo 'Start a Docker Container for this experiment, which should start the experiment and a archiva server, a inet server, and a omnet++ server..'
                sh 'if docker images | grep -q cpswt-meta:latest; then docker rmi cpswt-meta:latest; fi' // Remove the existing image with the name:tag cpswt-meta:latest
                dir("CI_with_Jenkins/cpswt-meta") {
                    sh 'docker build -t cpswt-meta:latest -f Dockerfile --build-arg ssh_prv_key="$(cat ~/.ssh/id_rsa)" --build-arg ssh_pub_key="$(cat ~/.ssh/id_rsa.pub)" .'
                }
            }
        }
        stage('Deploy image') {
            steps {
                echo 'Run the Docker Container inside Jenkins container'
                sh 'if docker ps -a | grep -q cpswt-meta; then docker stop cpswt-meta; fi' //Stop the existing container with the name cpswt-meta
                sh 'if docker ps -a | grep -q cpswt-meta; then docker rm -f cpswt-meta; fi' // Remove the existing container with the name cpswt-meta
                sh 'docker run \
                        --name cpswt-meta \
                        --publish 8081:8080 \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        cpswt-meta:latest'
            }
        }
        stage('Wait for cpswt-meta container to stop') {
            options {
                timeout(time: 30, unit: 'MINUTES')
            }
            steps {
                echo 'Wait for container to stop'
                sh 'docker wait cpswt-meta'
            }
        }
        stage('Output HelloWorldJava from container') {
            steps {
                dir("CI_with_Jenkins/cpswt-meta"){
                    sh 'docker cp cpswt-meta:/tmp/HelloWorldJava.zip .'
                    sh 'unzip -o HelloWorldJava.zip -d .'
                    sh 'pwd'
                }
            }
        }
        stage('Build HelloWorldJava image') {
            steps {
                echo 'Start a Docker Container for HelloWorldJava'
                sh 'if docker images | grep -q helloworldjava:latest; then docker rmi helloworldjava:latest; fi' // Remove the existing image with the name:tag helloworldjava:latest
                dir("CI_with_Jenkins/cpswt-meta") {
                    sh 'docker build -t helloworldjava:latest -f HelloWorldJava.Dockerfile .'
                }
            }
        }
        stage('Deploy HelloWorldJava image') {
            steps {
                echo 'Run the Docker Container for HelloWorldJava'
                sh 'if docker ps -a | grep -q helloworldjava; then docker stop helloworldjava; fi' //Stop the existing container with the name helloworldjava
                sh 'if docker ps -a | grep -q helloworldjava; then docker rm -f helloworldjava; fi' // Remove the existing container with the name helloworldjava
                sh 'docker run \
                        --name helloworldjava \
                        --publish 8082:8080 \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        helloworldjava:latest'
            }
        }
        stage('Wait for HelloWorldJava container to stop') {
            options {
                timeout(time: 30, unit: 'MINUTES')
            }
            steps {
                echo 'Wait for container to stop'
                sh 'docker wait helloworldjava'
            }
        }
        stage('Archive loggings') {
            steps {
                echo 'Archiving cpswt-meta & HelloWorldJava results...'
                sh 'docker logs helloworldjava > helloworldjava.log'
                sh 'docker logs cpswt-meta > cpswt-meta.log'
                archiveArtifacts artifacts: 'cpswt-meta.log', fingerprint: true
                archiveArtifacts artifacts: 'helloworldjava.log', fingerprint: true
            }
        }
    }

    post {
        always {
            echo 'This will always run'
            emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                    attachLog: true,
                    attachmentsPattern: 'cpswt-meta.log, helloworldjava.log'
            // echo 'Tearing Down the image & container....'
            // sh 'rm -rf cpswt-meta'
            // sh 'docker rm -f cpswt-meta'
            // sh 'docker rmi cpswt-meta:latest'
            // sh 'docker rm -f helloworldjava'
            // sh 'docker rmi helloworldjava:latest'
            // sh 'rm -rf HelloWorldJava.zip HelloWorldJava'
            // sh 'rm -rf cpswt-meta.log helloworldjava.log'
        }
    }	
}
