pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *') // poll the SCM every 1 minutes
    }

    stages {
        stage('Clone repository') {
            steps {
                echo 'Cloning Forked CPSWT-Core..'
                deleteDir() // Delete workspace before cloning
                git url: 'https://github.com/justinyeh1995/cpswt-cpp.git', branch: 'develop'
            }
        }
        stage('Build image') {
            steps {
                echo 'Start a Docker Container for this experiment, which should start the experiment and a archiva server, a inet server, and a omnet++ server..'
                sh 'cd cpswt-cpp'
                sh 'docker build -t cpswt-cpp:latest -f Dockerfile .'
            }
        }
        stage('Deploy image') {
            steps {
                echo 'Run the Docker Container inside Jenkins container'
                sh 'docker run \
                        --name cpswt-cpp \
                        --publish 8081:8080 \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        cpswt-cpp:latest'
            }
        }
        stage('Wait for container to stop') {
            options {
                timeout(time: 30, unit: 'MINUTES')
            }
            steps {
                echo 'Wait for container to stop'
                sh 'docker wait cpswt-cpp'
            }
        }
        stage('Archive loggings') {
            steps {
                echo 'Archiving the results...'
                sh 'docker logs cpswt-cpp > cpswt-cpp.log'
                archiveArtifacts artifacts: 'cpswt-cpp.log', fingerprint: true
            }
        }
    }

    post {
        always {
    	echo 'This will always run'
	    emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                attachLog: true,
                attachmentsPattern: 'cpswt-cpp.log'
        echo 'Tearing Down the image & container....'
        sh 'docker rm -f cpswt-cpp'
        sh 'docker rmi cpswt-cpp:latest'
        sh 'rm -rf cpswt-cpp'
        }
    }	
}
